import os
import time
import asyncio
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
except ImportError:
    # Alternat√≠v import ha a fenti nem m≈±k√∂dik
    import telegram
    from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
    Update = telegram.Update
    InlineKeyboardButton = telegram.InlineKeyboardButton
    InlineKeyboardMarkup = telegram.InlineKeyboardMarkup

# Be√°ll√≠t√°sok
ADMIN_ID = 5437277473
ARUSITO_IDK = [8055559906, 5803982074, 7471563285]  # √öj √°rus√≠t√≥ hozz√°adva
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("HIBA: BOT_TOKEN k√∂rnyezeti v√°ltoz√≥ nincs be√°ll√≠tva!")
    print("K√©rlek √°ll√≠tsd be a BOT_TOKEN-t a k√∂rnyezeti v√°ltoz√≥kban.")
    exit(1)

# Glob√°lis adatok
keszlet = {"VapSolo": {}, "Elf Bar": {}}
akciok = "Jelenleg nincsenek akci√≥k."
vip = "Jelenleg nincsenek V.I.P. aj√°nlatok."
user_sessions = {}
# Elad√°si sz√°ml√°l√≥ minden √°rus√≠t√≥ sz√°m√°ra: {seller_id: {"total_sold": total, "remainder": current_count}}
sales_counters = {}

# Term√©k le√≠r√°sok
termek_leirasok = {
    "VapSolo": (
        "üí® 60.000 slukk\n"
        "üéØ 3 √≠z egyben\n"
        "üí™ 5% nikotin\n"
        "üì± kisebb kijelz≈ë a folyad√©k √©s akkumul√°tor √°llapot√°r√≥l\n"
        "üîã 650 mAh akkumul√°tor\n"
        "‚ö° USB Type-C t√∂lt≈ë\n\n"
        "üí∞ **√År: 10.000 Ft**"
    ),
    "Elf Bar": (
        "‚öôÔ∏è 3 fokozat\n"
        "üå± Eco mode: 40.000 slukk\n"
        "üî• Normal mode: 30.000 slukk\n"
        "üöÄ Boost mode: 25.000 slukk\n"
        "üí™ 5% nikotin\n"
        "üì± nagyobb kijelz≈ë a folyad√©k √©s akkumul√°tor √°llapot√°r√≥l valamint az aktu√°lis fokozatr√≥l\n"
        "üîã 1000 mAh akkumul√°tor\n"
        "‚ö° USB Type-C t√∂lt≈ë\n\n"
        "üí∞ **√År: 10.000 Ft**"
    )
}

def get_user_session(user_id):
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            "visited": False,
            "state": {},
            "order_state": {},
            "pending_data": {},
            "chat_id": None,
            "last_activity": time.time(),
            "last_menu_message_id": None,
            "reserved_stock": {}  # Ideiglenes k√©szlet lefoglal√°s kos√°rhoz
        }
    else:
        user_sessions[user_id]["last_activity"] = time.time()
    return user_sessions[user_id]

def get_seller_sales_count(seller_id):
    """√Årus√≠t√≥ elad√°si sz√°m√°nak lek√©r√©se (jelenlegi sz√°ml√°l√≥ √©rt√©k 0-9)"""
    if seller_id not in sales_counters:
        return 0
    return sales_counters[seller_id].get("remainder", 0)

def get_seller_total_sales(seller_id):
    """√Årus√≠t√≥ √∂sszes elad√°s√°nak lek√©r√©se"""
    if seller_id not in sales_counters:
        return 0
    return sales_counters[seller_id].get("total_sold", 0)

def release_reserved_stock(user_id):
    """Lefoglalt k√©szlet felszabad√≠t√°sa"""
    session = get_user_session(user_id)
    if "reserved_stock" not in session:
        return
    
    for (termek, iz), qty in session["reserved_stock"].items():
        if termek in keszlet:
            if iz in keszlet[termek]:
                keszlet[termek][iz] += qty
            else:
                keszlet[termek][iz] = qty
    
    session["reserved_stock"] = {}
    print(f"Lefoglalt k√©szlet felszabad√≠tva user {user_id} sz√°m√°ra")

def build_order_summary(items):
    """Rendel√©si √∂sszes√≠t≈ë k√©sz√≠t√©se"""
    if not items:
        return "A kos√°r √ºres.", 0
    
    # Csoportos√≠t√°s term√©k √©s √≠z szerint
    grouped = {}
    for item in items:
        termek = item["termek"]
        iz = item["iz"]
        db = item["db"]
        
        key = (termek, iz)
        if key not in grouped:
            grouped[key] = 0
        grouped[key] += db
    
    # √ñsszes√≠t≈ë sz√∂veg k√©sz√≠t√©se
    summary = "üõí **Rendel√©si √∂sszes√≠t≈ë:**\n\n"
    total_qty = 0
    
    # Term√©kek szerint csoportos√≠tva
    termekek = {}
    for (termek, iz), db in grouped.items():
        if termek not in termekek:
            termekek[termek] = []
        termekek[termek].append((iz, db))
        total_qty += db
    
    for termek, izek in termekek.items():
        # Teljes term√©k n√©v
        if termek == "VapSolo":
            display_name = "VapSolo Triple 60K"
        elif termek == "Elf Bar":
            display_name = "Elf Bar MoonNight 40K" 
        else:
            display_name = termek
        
        summary += f"**{display_name}:**\n"
        for iz, db in izek:
            summary += f"‚Ä¢ {iz}: {db} db\n"
        summary += "\n"
    
    summary += f"üì¶ **√ñsszesen:** {total_qty} db"
    return summary, total_qty

def increment_seller_sales(seller_id, quantity=1):
    """√Årus√≠t√≥ elad√°si sz√°m√°nak n√∂vel√©se (darabsz√°m szerint)"""
    if seller_id not in sales_counters:
        sales_counters[seller_id] = {"total_sold": 0, "remainder": 0}
    
    old_total = sales_counters[seller_id]["total_sold"]
    old_remainder = sales_counters[seller_id]["remainder"]
    
    new_total = old_total + quantity
    new_remainder = new_total % 10
    
    # Delta awards: h√°ny 10-es k√ºsz√∂b√∂t l√©pett √°t EBBEN a rendel√©sben
    delta_awards = (old_total + quantity) // 10 - old_total // 10
    
    # Friss√≠t√©s
    sales_counters[seller_id]["total_sold"] = new_total
    sales_counters[seller_id]["remainder"] = new_remainder
    
    return new_remainder, delta_awards, new_total  # (jelenlegi sz√°ml√°l√≥, √∫j awards, √∂sszes elad√°s)

async def notify_admin_and_seller(context, seller_id, current_count, delta_awards=0, total_sold=0):
    """Admin √©s √°rus√≠t√≥ √©rtes√≠t√©se elad√°sokr√≥l"""
    seller_name = f"√Årus√≠t√≥ (ID: {seller_id})"
    
    # Admin √©rtes√≠t√©se
    admin_msg = f"üìä **Elad√°si jelent√©s**\n\n{seller_name} jelenlegi ciklus: **{current_count}/10 db**"
    admin_msg += f"\nüìä **√ñsszes elad√°s:** {total_sold} db"
    
    if delta_awards > 0:
        if delta_awards == 1:
            admin_msg += f"\n\nüéâ **{seller_name} el√©rte a 10 db-os limitet!**\n‚úÖ Jogosult 1 db ingyen term√©kre!"
        else:
            admin_msg += f"\n\nüéâ **{seller_name} {delta_awards} alkalommal √©rte el a 10 db-os limitet!**\n‚úÖ Jogosult {delta_awards} db ingyen term√©kre!"
    
    await send_private_message(context, ADMIN_ID, admin_msg)
    
    # √Årus√≠t√≥ √©rtes√≠t√©se
    seller_msg = f"üìà **Elad√°s r√∂gz√≠tve!**\n\nüìä **√ñsszes elad√°s:** {total_sold} db"
    seller_msg += f"\nüìä **Jelenlegi ciklus:** {current_count}/10 db"
    
    if delta_awards > 0:
        if delta_awards == 1:
            seller_msg += f"\n\nüéâ **Gratul√°lunk!**\nEl√©rted a 10 db-os limitet!\n‚úÖ Jogosult vagy 1 db ingyen term√©kre!"
            seller_msg += f"\nVedd fel a kapcsolatot az adminnal!"
        else:
            seller_msg += f"\n\nüéâ **SZUPER GRATUL√ÅLUNK!**\n{delta_awards} alkalommal √©rted el a 10 db-os limitet!\n‚úÖ Jogosult vagy {delta_awards} db ingyen term√©kre!"
            seller_msg += f"\nVedd fel a kapcsolatot az adminnal!"
    else:
        remaining = 10 - current_count if current_count > 0 else 10
        seller_msg += f"\nM√©g {remaining} db az ingyen term√©kig! üí™"
    
    await send_private_message(context, seller_id, seller_msg)

def get_product_description(termek):
    """Visszaadja a term√©k le√≠r√°s√°t"""
    if termek == "VapSolo" or termek == "VapSolo Triple 60K":
        return (
            "60.000 slukk\n"
            "3 √≠z egyben\n"
            "5% nikotin\n"
            "kisebb kijelz≈ë a folyad√©k √©s akkumul√°tor √°llapot√°r√≥l\n"
            "650 mAh akkumul√°tor\n"
            "USB Type-C t√∂lt≈ë\n\n"
        )
    elif termek == "Elf Bar" or termek == "Elf Bar MoonNight 40K":
        return (
            "3 fokozat\n"
            "Eco mode: 40.000 slukk\n"
            "Normal mode: 30.000 slukk\n"
            "Boost mode: 25.000 slukk\n"
            "5% nikotin\n"
            "nagyobb kijelz≈ë a folyad√©k √©s akkumul√°tor √°llapot√°r√≥l valamint az aktu√°lis fokozatr√≥l\n"
            "1000 mAh akkumul√°tor\n"
            "USB Type-C t√∂lt≈ë\n\n"
        )
    else:
        return ""

def cleanup_inactive_sessions():
    current_time = time.time()
    timeout = 3600

    for user_id in list(user_sessions.keys()):
        if current_time - user_sessions[user_id].get("last_activity", 0) > timeout:
            # Lefoglalt k√©szlet felszabad√≠t√°sa miel≈ëtt t√∂r√∂lj√ºk a sessiont
            release_reserved_stock(user_id)
            del user_sessions[user_id]
            print(f"Inakt√≠v session t√∂r√∂lve: {user_id}")

async def send_private_message(context, admin_id, message):
    try:
        await context.bot.send_message(chat_id=admin_id, text=message, parse_mode='Markdown')
    except Exception:
        pass

async def delete_message_after_delay(context, chat_id, message_id, delay=10):
    """√úzenet t√∂rl√©se megadott id≈ë ut√°n"""
    try:
        await asyncio.sleep(delay)
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"Nem siker√ºlt t√∂r√∂lni az √ºzenetet: {e}")

async def start_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Csatorna kezel√©se - csak √°tir√°ny√≠t√°s priv√°t chatbe"""
    try:
        chat_id = update.effective_chat.id if update.effective_chat else 0

        # Bot neve lek√©r√©se
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username

        welcome_text = (
            "üî∏ √údv√∂zl√ºnk az e-cigaretta boltban! üî∏\n\n"
            "üì± A term√©kek b√∂ng√©sz√©s√©hez √©s rendel√©shez kattints az al√°bbi gombra, "
            "ami √°tir√°ny√≠t a priv√°t chatbe:\n\n"
            "‚¨áÔ∏è PRIV√ÅT CHAT IND√çT√ÅSA ‚¨áÔ∏è"
        )

        keyboard = [[InlineKeyboardButton("üí¨ Priv√°t chat megnyit√°sa", url=f"https://t.me/{bot_username}?start=channel_{abs(int(chat_id))}")]]

        message_obj = update.message or update.channel_post
        if message_obj:
            sent_message = await message_obj.reply_text(
                welcome_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

            # √úzenet t√∂rl√©se 30 m√°sodperc ut√°n
            asyncio.create_task(delete_message_after_delay(context, chat_id, sent_message.message_id, 30))

            # Eredeti √ºzenet t√∂rl√©se is (ha /start parancs volt)
            if update.message:
                asyncio.create_task(delete_message_after_delay(context, chat_id, update.message.message_id, 30))

    except Exception as e:
        print(f"Error in start_channel: {e}")

async def clear_chat_history(context, chat_id, user_id, keep_message_id=None):
    """Chat el≈ëzm√©nyek t√∂rl√©se - agressz√≠vebb megk√∂zel√≠t√©s"""
    try:
        session = get_user_session(user_id)
        deleted_count = 0
        
        # 1. T√∂r√∂lj√ºk a sessionban t√°rolt message ID-kat
        for key in list(session.keys()):
            if "message_id" in key and session[key] and session[key] != keep_message_id:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=session[key])
                    deleted_count += 1
                    del session[key]
                except Exception:
                    pass
        
        # 2. Pr√≥b√°ljuk meg t√∂r√∂lni a legut√≥bbi √ºzeneteket
        # Egy √ºzenet k√ºld√©se hogy megkapjuk az aktu√°lis message_id-t
        try:
            temp_msg = await context.bot.send_message(chat_id=chat_id, text="üßπ")
            current_id = temp_msg.message_id
            await context.bot.delete_message(chat_id=chat_id, message_id=current_id)
            
            # Visszafel√© t√∂r√∂lj√ºk az √ºzeneteket az aktu√°lis ID-t√≥l
            for i in range(1, 20):  # Utols√≥ 20 √ºzenet
                try:
                    msg_id = current_id - i
                    if msg_id != keep_message_id:
                        await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                        deleted_count += 1
                except Exception:
                    continue
        except Exception:
            pass
            
        print(f"Chat takar√≠t√°s: {deleted_count} √ºzenet t√∂r√∂lve")
        
    except Exception as e:
        print(f"Hiba a chat takar√≠t√°sban: {e}")
        pass

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Priv√°t chat √©s csoport kezel√©se"""
    try:
        # Ha csatorna, akkor csatorna kezel≈ët h√≠vjuk
        if update.channel_post or (update.effective_chat and update.effective_chat.type == "channel"):
            await start_channel(update, context)
            return

        # Ha csoport vagy szupergroup, szint√©n csatorna kezel≈ët h√≠vjuk
        chat_type = update.effective_chat.type if update.effective_chat else "private"
        if chat_type in ["group", "supergroup"]:
            await start_channel(update, context)
            return

        if not update.effective_user:
            return

        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "Felhaszn√°l√≥"
        chat_id = update.effective_chat.id

        # Session t√∂rl√©se √©s √∫jra l√©trehoz√°sa
        old_session = None
        if user_id in user_sessions:
            old_session = user_sessions[user_id]
            del user_sessions[user_id]

        session = get_user_session(user_id)
        session["chat_id"] = chat_id

        # Ellen≈ërizz√ºk, hogy csatorn√°b√≥l j√∂n-e (start param√©ter alapj√°n)
        channel_info = ""
        if context.args and len(context.args) > 0 and context.args[0].startswith("channel_"):
            channel_info = "\nüîó Sikeresen csatlakozt√°l a csatorn√°b√≥l!"

        # F≈ëmen√º azonnali megjelen√≠t√©se (nem √ºdv√∂zl≈ë sz√∂veg)
        main_menu = []
        main_menu.append([InlineKeyboardButton("üì¶ Aktu√°lis", callback_data="aktualis")])
        main_menu.append([InlineKeyboardButton("üéØ Akci√≥", callback_data="akcio")])
        main_menu.append([InlineKeyboardButton("üìã Term√©kek", callback_data="termekek")])

        if user_id in ARUSITO_IDK or user_id == ADMIN_ID:
            main_menu.append([InlineKeyboardButton("‚≠ê V.I.P.", callback_data="vip")])
            main_menu.append([InlineKeyboardButton("üõí Rendel√©s", callback_data="rendeles")])

        if user_id == ADMIN_ID:
            main_menu.append([InlineKeyboardButton("üì• Felt√∂lt√©s", callback_data="feltoltes")])

        # Tiszta √ºdv√∂zl≈ë sz√∂veg a f≈ëmen√ºvel
        welcome_text = f"Szia {user_name}! üëã{channel_info}\n\nV√°lassz a men√ºb≈ël:"

        # EL≈êSZ√ñR: √öj √ºzenet k√ºld√©se
        sent_message = await context.bot.send_message(
            chat_id=chat_id,
            text=welcome_text,
            reply_markup=InlineKeyboardMarkup(main_menu)
        )
        session["last_menu_message_id"] = sent_message.message_id

        # AZUT√ÅN: Teljes chat takar√≠t√°s a h√°tt√©rben
        async def cleanup_chat():
            await asyncio.sleep(0.5)  # Kis k√©sleltet√©s a men√º megjelen√≠t√©se ut√°n
            
            # /start parancs t√∂rl√©se
            message_obj = update.message
            if message_obj:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_obj.message_id)
                except Exception:
                    pass
            
            # Teljes chat takar√≠t√°s (kiv√©ve az √∫j men√º √ºzenetet)
            await clear_chat_history(context, chat_id, user_id, keep_message_id=sent_message.message_id)

        # Takar√≠t√°s ind√≠t√°sa a h√°tt√©rben
        asyncio.create_task(cleanup_chat())

    except Exception as e:
        print(f"Hiba a start kezel√©sben: {e}")

async def show_main_menu(query, user_id):
    """F≈ëmen√º megjelen√≠t√©se"""
    main_menu = []
    main_menu.append([InlineKeyboardButton("üì¶ Aktu√°lis", callback_data="aktualis")])
    main_menu.append([InlineKeyboardButton("üéØ Akci√≥", callback_data="akcio")])
    main_menu.append([InlineKeyboardButton("üìã Term√©kek", callback_data="termekek")])

    if user_id in ARUSITO_IDK or user_id == ADMIN_ID:
        main_menu.append([InlineKeyboardButton("‚≠ê V.I.P.", callback_data="vip")])
        main_menu.append([InlineKeyboardButton("üõí Rendel√©s", callback_data="rendeles")])

    if user_id == ADMIN_ID:
        main_menu.append([InlineKeyboardButton("üì• Felt√∂lt√©s", callback_data="feltoltes")])

    await safe_edit_message(query, "V√°lassz a men√ºb≈ël:", reply_markup=InlineKeyboardMarkup(main_menu))

async def safe_edit_message(query, text, reply_markup=None, parse_mode=None):
    """Biztons√°gos √ºzenet szerkeszt√©s - kezeli a 'Message is not modified' hib√°t"""
    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        if "Message is not modified" in str(e):
            # Ha ugyanaz a tartalom, r√∂vid visszajelz√©s
            await query.answer("Nincs v√°ltoz√°s", show_alert=False)
        else:
            # Egy√©b hiba eset√©n √∫jradobjuk
            raise e

async def send_error_and_keep_menu(context, chat_id, session, error_text, return_callback="back_to_main"):
    """Hiba√ºzenet k√ºld√©se √∫gy, hogy a men√º megmaradjon"""
    # Hiba√ºzenet k√ºld√©se
    error_keyboard = [[InlineKeyboardButton("‚úÖ √ârtettem", callback_data=return_callback)]]
    error_message = await context.bot.send_message(
        chat_id=chat_id,
        text=error_text,
        reply_markup=InlineKeyboardMarkup(error_keyboard)
    )

    # Hiba√ºzenet automatikus t√∂rl√©se 10 m√°sodperc ut√°n
    asyncio.create_task(delete_message_after_delay(context, chat_id, error_message.message_id, 10))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gomb kezel√©s - CSAK priv√°t chatben"""
    global akciok, vip, keszlet, termek_leirasok
    try:
        query = update.callback_query
        if not query:
            return

        # FONTOS: Csak priv√°t chatben enged√©lyezz√ºk a gombokat
        if update.effective_chat.type != "private":
            await query.answer("‚ùå A men√ºk csak priv√°t chatben m≈±k√∂dnek! √çrj priv√°tban a botnak: /start", show_alert=True)
            return

        await query.answer()

        user_id = query.from_user.id
        actual_user_id = query.from_user.id
        user_name = query.from_user.first_name or "Felhaszn√°l√≥"
        data = query.data
        session = get_user_session(user_id)

        if data == "welcome_ok":
            await show_main_menu(query, actual_user_id)

        elif data == "termekek":
            # Chat takar√≠t√°s a men√º megjelen√≠t√©se el≈ëtt
            chat_id = query.message.chat.id
            
            keyboard = [
                [InlineKeyboardButton("üî∏ VapSolo Triple 60K", callback_data="termek_VapSolo")],
                [InlineKeyboardButton("üî∏ Elf Bar MoonNight 40K", callback_data="termek_Elf Bar")],
                [InlineKeyboardButton("‚¨ÖÔ∏è Vissza", callback_data="back_to_main")]
            ]
            
            # √öj √ºzenet k√ºld√©se
            sent_message = await context.bot.send_message(
                chat_id=chat_id,
                text="V√°lassz term√©ket a r√©szletes le√≠r√°s√©rt:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            session["last_menu_message_id"] = sent_message.message_id
            
            # Kor√°bbi √ºzenetek t√∂rl√©se a h√°tt√©rben
            asyncio.create_task(clear_chat_history(context, chat_id, actual_user_id, keep_message_id=sent_message.message_id))

        elif data.startswith("termek_"):
            termek = data.split("_", 1)[1]
            if termek == "VapSolo":
                display_name = "VapSolo Triple 60K"
            elif termek == "Elf Bar":
                display_name = "Elf Bar MoonNight 40K"
            else:
                display_name = termek

            leiras = termek_leirasok.get(termek, "Nincs el√©rhet≈ë le√≠r√°s.")

            keyboard = [[InlineKeyboardButton("‚úÖ Rendben", callback_data="termekek")]]
            if actual_user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è M√≥dos√≠t√°s", callback_data=f"termek_modositas_{termek}")])

            await query.edit_message_text(f"**{display_name}**\n\n{leiras}", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data.startswith("termek_modositas_") and actual_user_id == ADMIN_ID:
            termek = data.split("_", 2)[2]
            session["state"] = {"mode": "termek_edit", "termek": termek}
            if termek == "VapSolo":
                display_name = "VapSolo Triple 60K"
            elif termek == "Elf Bar":
                display_name = "Elf Bar MoonNight 40K"
            else:
                display_name = termek

            current_leiras = termek_leirasok.get(termek, "")
            keyboard = [[InlineKeyboardButton("‚ùå M√©gsem", callback_data=f"termek_{termek}")]]
            await query.edit_message_text(f"Jelenlegi {display_name} le√≠r√°s:\n\n{current_leiras}\n\n√çrd be az √∫j le√≠r√°st:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "aktualis":
            # Chat takar√≠t√°s a men√º megjelen√≠t√©se el≈ëtt
            chat_id = query.message.chat.id
            session = get_user_session(actual_user_id)
            
            # √öj men√º √ºzenet k√ºld√©se
            msg = "üì¶ **Aktu√°lis k√©szlet:**\n\n"
            for termek, lista in keszlet.items():
                # Teljes term√©k n√©v megjelen√≠t√©se
                if termek == "VapSolo":
                    display_name = "VapSolo Triple 60K"
                elif termek == "Elf Bar":
                    display_name = "Elf Bar MoonNight 40K"
                else:
                    display_name = termek
                
                msg += f"**{display_name}**\n"
                msg += f"üí∞ **√År:** 10.000 Ft\n\n"
                
                if not lista:
                    msg += "‚ùå Nincs k√©szleten\n\n"
                else:
                    msg += "üìã **K√©szleten l√©v≈ë √≠zek:**\n"
                    for iz, db in lista.items():
                        msg += f"‚Ä¢ {iz}: {db} db\n"
                    msg += "\n"

            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è Vissza", callback_data="back_to_main")]]
            
            # √öj √ºzenet k√ºld√©se
            sent_message = await context.bot.send_message(
                chat_id=chat_id,
                text=msg,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            session["last_menu_message_id"] = sent_message.message_id
            
            # Kor√°bbi √ºzenetek t√∂rl√©se a h√°tt√©rben
            asyncio.create_task(clear_chat_history(context, chat_id, actual_user_id, keep_message_id=sent_message.message_id))

        elif data == "akcio":
            # Chat takar√≠t√°s a men√º megjelen√≠t√©se el≈ëtt
            chat_id = query.message.chat.id
            
            keyboard = []
            if actual_user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è M√≥dos√≠t√°s", callback_data="akcio_modositas")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Vissza", callback_data="back_to_main")])
            
            # √öj √ºzenet k√ºld√©se
            sent_message = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üéØ **Akci√≥k:**\n\n{akciok}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            session["last_menu_message_id"] = sent_message.message_id
            
            # Kor√°bbi √ºzenetek t√∂rl√©se a h√°tt√©rben
            asyncio.create_task(clear_chat_history(context, chat_id, actual_user_id, keep_message_id=sent_message.message_id))

        elif data == "akcio_modositas" and actual_user_id == ADMIN_ID:
            session["state"] = {"mode": "akcio_edit"}
            keyboard = [[InlineKeyboardButton("‚ùå M√©gsem", callback_data="akcio")]]
            await query.edit_message_text(f"Jelenlegi akci√≥:\n\n{akciok}\n\n√çrd be az √∫j akci√≥ sz√∂veg√©t:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "vip":
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return

            keyboard = []
            if actual_user_id == ADMIN_ID:
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è M√≥dos√≠t√°s", callback_data="vip_modositas")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Vissza", callback_data="back_to_main")])
            await query.edit_message_text(f"‚≠ê **V.I.P. aj√°nlatok:**\n\n{vip}", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data == "vip_modositas" and actual_user_id == ADMIN_ID:
            session["state"] = {"mode": "vip_edit"}
            keyboard = [[InlineKeyboardButton("‚ùå M√©gsem", callback_data="vip")]]
            await query.edit_message_text(f"Jelenlegi V.I.P. aj√°nlat:\n\n{vip}\n\n√çrd be az √∫j V.I.P. aj√°nlat sz√∂veg√©t:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "rendeles":
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
            
            # Elad√°si sz√°ml√°l√≥ megjelen√≠t√©se
            current_remainder = get_seller_sales_count(actual_user_id)
            total_sales = get_seller_total_sales(actual_user_id)
            remaining = 10 - current_remainder if current_remainder > 0 else 10
            
            msg = f"üõí **Rendel√©si rendszer**\n\n"
            msg += f"üìä **√ñsszes elad√°s:** {total_sales} db\n"
            msg += f"üìä **Jelenlegi ciklus:** {current_remainder}/10 db\n"
            
            if current_remainder == 0 and total_sales > 0:
                msg += f"üéâ **Gratul√°lunk! El√©rted a 10 db-os limitet!**\n"
                msg += f"‚úÖ Jogosult vagy 1 db ingyen term√©kre!\n\n"
            else:
                msg += f"üí™ M√©g {remaining} db az ingyen term√©kig!\n\n"
            
            msg += f"V√°lassz term√©ket a rendel√©shez:"
            
            keyboard = []
            if keszlet["VapSolo"]:
                keyboard.append([InlineKeyboardButton("üîπ VapSolo Triple 60K", callback_data="rendeles_VapSolo")])
            if keszlet["Elf Bar"]:
                keyboard.append([InlineKeyboardButton("üîπ Elf Bar MoonNight 40K", callback_data="rendeles_Elf Bar")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Vissza", callback_data="back_to_main")])
            
            await query.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data.startswith("rendeles_") and not data.startswith("rendeles_iz_") and not data.startswith("rendeles_db_") and data not in ["rendeles_meg", "rendeles_confirm", "rendeles_ossz", "rendeles_megsem"]:
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
                
            termek = data.split("_", 1)[1]
            # T√∂bbsz√∂r√∂s rendel√©si session strukt√∫ra
            if "order_state" not in session:
                session["order_state"] = {"items": [], "current_termek": None}
            session["order_state"]["current_termek"] = termek
            
            # √çzek list√°z√°sa
            izek = list(keszlet[termek].keys())
            if not izek:
                await query.answer("‚ùå Ez a term√©k jelenleg nincs k√©szleten!", show_alert=True)
                return
            
            keyboard = []
            for iz in izek:
                if keszlet[termek][iz] > 0:
                    keyboard.append([InlineKeyboardButton(f"{iz} ({keszlet[termek][iz]} db)", callback_data=f"rendeles_iz_{iz}")])
            keyboard.append([InlineKeyboardButton("‚ùå M√©gsem", callback_data="rendeles")])
            
            display_name = "VapSolo Triple 60K" if termek == "VapSolo" else "Elf Bar MoonNight 40K"
            await safe_edit_message(query, f"üîπ **{display_name}**\n\nV√°lassz √≠zt:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data.startswith("rendeles_iz_"):
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
                
            iz = data.split("_", 2)[2]
            if "order_state" not in session or not session["order_state"] or not session["order_state"].get("current_termek"):
                await query.answer("‚ùå Hiba t√∂rt√©nt! Kezdd √∫jra a rendel√©st.", show_alert=True)
                return
                
            termek = session["order_state"]["current_termek"]
            session["order_state"]["current_iz"] = iz
            max_db = keszlet[termek].get(iz, 0)
            
            if max_db <= 0:
                await query.answer("‚ùå Ez az √≠z jelenleg nincs k√©szleten!", show_alert=True)
                return
            
            keyboard = []
            # Csak annyi darabsz√°m opci√≥, amennyi k√©szleten van
            for i in range(1, max_db + 1):
                keyboard.append([InlineKeyboardButton(f"{i} db", callback_data=f"rendeles_db_{i}")])
            keyboard.append([InlineKeyboardButton("‚ùå M√©gsem", callback_data="rendeles")])
            
            await safe_edit_message(query, f"üîπ **{iz}**\n\nMennyi darabot szeretn√©l rendelni?\n(K√©szleten: {max_db} db)", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data.startswith("rendeles_db_"):
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
                
            db = int(data.split("_", 2)[2])
            if "order_state" not in session or not session["order_state"] or not session["order_state"].get("current_termek") or not session["order_state"].get("current_iz"):
                await query.answer("‚ùå Hiba t√∂rt√©nt! Kezdd √∫jra a rendel√©st.", show_alert=True)
                return
                
            termek = session["order_state"]["current_termek"]
            iz = session["order_state"]["current_iz"]
            
            # K√©szlet ellen≈ërz√©se (de m√©g NEM cs√∂kkentj√ºk!)
            if keszlet[termek].get(iz, 0) < db:
                await query.answer("‚ùå Nincs elegend≈ë k√©szlet!", show_alert=True)
                return
            
            # Order state inicializ√°l√°sa ha sz√ºks√©ges
            if "order_state" not in session:
                session["order_state"] = {"items": [], "current_termek": None}
            if "items" not in session["order_state"]:
                session["order_state"]["items"] = []
            
            # K√©szlet lefoglal√°sa id≈ëlegesen a kos√°rban
            if "reserved_stock" not in session:
                session["reserved_stock"] = {}
            
            key = (termek, iz)
            if key in session["reserved_stock"]:
                session["reserved_stock"][key] += db
            else:
                session["reserved_stock"][key] = db
                
            # K√©szletb≈ël ideiglenes kivon√°s
            keszlet[termek][iz] -= db
            if keszlet[termek][iz] <= 0:
                del keszlet[termek][iz]
            
            print(f"Lefoglalva: {termek} {iz} {db} db user {actual_user_id} sz√°m√°ra")
            
            # Hozz√°ad√°s a kos√°rhoz
            new_item = {"termek": termek, "iz": iz, "db": db}
            session["order_state"]["items"].append(new_item)
            session["order_state"]["current_iz"] = None  # T√∂r√∂lj√ºk az √°tmeneti √°llapotot
            
            # Teljes rendel√©si √∂sszes√≠t≈ë megjelen√≠t√©se
            display_name = "VapSolo Triple 60K" if termek == "VapSolo" else "Elf Bar MoonNight 40K"
            
            # Aktu√°lis rendel√©s √∂sszes√≠t√©se
            summary_text, total_qty = build_order_summary(session["order_state"]["items"])
            
            msg = f"‚úÖ **Kos√°rhoz adva: {iz} - {db} db**\n\n"
            msg += summary_text + "\n\n"
            msg += f"Mit szeretn√©l csin√°lni?"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï Rendelek m√©g", callback_data="rendeles_meg")],
                [InlineKeyboardButton("‚úÖ V√©gleges√≠t√©s", callback_data="rendeles_confirm")],
                [InlineKeyboardButton("‚ùå Kos√°r √ºr√≠t√©se", callback_data="rendeles_megsem")]
            ]
            await safe_edit_message(query, msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data == "rendeles_meg":
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
            
            # Vissza a term√©k v√°laszt√°shoz (kos√°r megtart√°sa)
            current_remainder = get_seller_sales_count(actual_user_id)
            total_sales = get_seller_total_sales(actual_user_id)
            remaining = 10 - current_remainder if current_remainder > 0 else 10
            
            items_count = len(session.get("order_state", {}).get("items", []))
            
            msg = f"üõí **Rendel√©si rendszer** (Kos√°rban: {items_count} t√©tel)\n\n"
            msg += f"üìä **√ñsszes elad√°s:** {total_sales} db\n"
            msg += f"üìä **Jelenlegi ciklus:** {current_remainder}/10 db\n"
            
            if current_remainder == 0 and total_sales > 0:
                msg += f"üéâ **Gratul√°lunk! El√©rted a 10 db-os limitet!**\n"
                msg += f"‚úÖ Jogosult vagy 1 db ingyen term√©kre!\n\n"
            else:
                msg += f"üí™ M√©g {remaining} db az ingyen term√©kig!\n\n"
            
            msg += f"V√°lassz term√©ket a rendel√©shez:"
            
            keyboard = []
            if keszlet["VapSolo"]:
                keyboard.append([InlineKeyboardButton("üîπ VapSolo Triple 60K", callback_data="rendeles_VapSolo")])
            if keszlet["Elf Bar"]:
                keyboard.append([InlineKeyboardButton("üîπ Elf Bar MoonNight 40K", callback_data="rendeles_Elf Bar")])
            keyboard.append([InlineKeyboardButton("üßæ Kos√°r", callback_data="rendeles_ossz")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Vissza", callback_data="back_to_main")])
            
            await safe_edit_message(query, msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data == "rendeles_ossz":
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
            
            items = session.get("order_state", {}).get("items", [])
            if not items:
                await query.answer("‚ùå A kos√°r √ºres!", show_alert=True)
                return
            
            summary_text, total_qty = build_order_summary(items)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ V√©gleges√≠t√©s", callback_data="rendeles_confirm")],
                [InlineKeyboardButton("‚ûï Rendelek m√©g", callback_data="rendeles_meg")],
                [InlineKeyboardButton("‚ùå Kos√°r √ºr√≠t√©se", callback_data="rendeles_megsem")]
            ]
            await safe_edit_message(query, summary_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data == "rendeles_megsem":
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
            
            # Lefoglalt k√©szlet felszabad√≠t√°sa
            release_reserved_stock(actual_user_id)
            
            # Kos√°r √ºr√≠t√©se
            session["order_state"] = {"items": [], "current_termek": None}
            
            msg = "üóëÔ∏è **Kos√°r √ºr√≠tve!**\n\nMit szeretn√©l csin√°lni?"
            keyboard = [
                [InlineKeyboardButton("üõí √öj rendel√©s", callback_data="rendeles")],
                [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
            ]
            await safe_edit_message(query, msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data == "rendeles_confirm":
            if actual_user_id not in ARUSITO_IDK and actual_user_id != ADMIN_ID:
                await query.answer("‚ùå Nincs jogosults√°god ehhez!", show_alert=True)
                return
                
            items = session.get("order_state", {}).get("items", [])
            if not items:
                await query.answer("‚ùå A kos√°r √ºres!", show_alert=True)
                return
            
            # Csoportos√≠t√°s √©s k√©szlet ellen≈ërz√©s
            grouped = {}
            for item in items:
                key = (item["termek"], item["iz"])
                if key not in grouped:
                    grouped[key] = 0
                grouped[key] += item["db"]
            
            # K√©szlet ellen≈ërz√©se minden t√©telre (reserved stock figyelembev√©tel√©vel)
            shortages = []
            reserved = session.get("reserved_stock", {})
            for (termek, iz), needed_qty in grouped.items():
                # A jelenlegi k√©szlet + ez a felhaszn√°l√≥ lefoglalt k√©szlete 
                available = keszlet[termek].get(iz, 0) + reserved.get((termek, iz), 0)
                if available < needed_qty:
                    shortages.append(f"‚Ä¢ {iz}: {needed_qty} db kell, {available} db van")
            
            if shortages:
                error_msg = "‚ùå **Nincs elegend≈ë k√©szlet!**\n\n" + "\n".join(shortages)
                error_msg += "\n\nK√©rlek m√≥dos√≠tsd a rendel√©st."
                keyboard = [[InlineKeyboardButton("üßæ Vissza az √∂sszes√≠t≈ëh√∂z", callback_data="rendeles_ossz")]]
                await safe_edit_message(query, error_msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
                return
            
            # √ñsszes√≠tett mennyis√©g sz√°m√≠t√°sa (a k√©szlet m√°r le van cs√∂kkentve a kos√°rba rak√°skor)
            total_qty = 0
            for (termek, iz), qty in grouped.items():
                total_qty += qty
            
            # Elad√°si sz√°ml√°l√≥ n√∂vel√©se
            current_count, delta_awards, total_sold = increment_seller_sales(actual_user_id, total_qty)
            
            # √ârtes√≠t√©sek
            seller_name = query.from_user.first_name or "Ismeretlen"
            summary_text, _ = build_order_summary(items)
            
            # Admin √©rtes√≠t√©s
            admin_msg = f"üì¶ **√öJ √ñSSZEVONT RENDEL√âS**\n\n"
            admin_msg += f"üë§ **√Årus√≠t√≥:** {seller_name} (ID: {actual_user_id})\n\n"
            admin_msg += summary_text.replace("üõí **Rendel√©si √∂sszes√≠t≈ë:**", "**Rendelt term√©kek:**")
            admin_msg += f"\n\nüìä **√Årus√≠t√≥ jelenlegi:** {current_count}/10 db"
            admin_msg += f"\nüìä **√ñsszes elad√°s:** {total_sold} db"
            
            if delta_awards > 0:
                if delta_awards == 1:
                    admin_msg += f"\n\nüéâ **FIGYELEM:** {seller_name} el√©rte a 10 db-os limitet!"
                    admin_msg += f"\n‚úÖ Jogosult 1 db ingyen term√©kre!"
                else:
                    admin_msg += f"\n\nüéâ **FIGYELEM:** {seller_name} {delta_awards} alkalommal √©rte el a 10 db-os limitet!"
                    admin_msg += f"\n‚úÖ Jogosult {delta_awards} db ingyen term√©kre!"
            
            await send_private_message(context, ADMIN_ID, admin_msg)
            
            # √Årus√≠t√≥ √©rtes√≠t√©s
            if delta_awards > 0:
                if delta_awards == 1:
                    seller_msg = f"üìà **Rendel√©s v√©gleges√≠tve!**\n\nüéâ **Gratul√°lunk!**\nEl√©rted a 10 db-os limitet!\n‚úÖ Jogosult vagy 1 db ingyen term√©kre!"
                    seller_msg += f"\n\nüîÑ **√öj ciklus:** {current_count}/10 db\nüìä **√ñsszes elad√°s:** {total_sold} db\nVedd fel a kapcsolatot az adminnal!"
                else:
                    seller_msg = f"üìà **Rendel√©s v√©gleges√≠tve!**\n\nüéâ **SZUPER GRATUL√ÅLUNK!**\n{delta_awards} alkalommal √©rted el a 10 db-os limitet!\n‚úÖ Jogosult vagy {delta_awards} db ingyen term√©kre!"
                    seller_msg += f"\n\nüîÑ **√öj ciklus:** {current_count}/10 db\nüìä **√ñsszes elad√°s:** {total_sold} db\nVedd fel a kapcsolatot az adminnal!"
            else:
                seller_msg = f"üìà **Rendel√©s v√©gleges√≠tve!**\n\nüìä **√ñsszes elad√°s:** {total_sold} db"
                seller_msg += f"\nüìä **Jelenlegi ciklus:** {current_count}/10 db"
                remaining = 10 - current_count if current_count > 0 else 10
                seller_msg += f"\nM√©g {remaining} db az ingyen term√©kig! üí™"
            
            await send_private_message(context, actual_user_id, seller_msg)
            
            # Visszajelz√©s a chatben
            success_msg = f"‚úÖ **Rendel√©s sikeresen v√©gleges√≠tve!**\n\n{summary_text.replace('üõí **Rendel√©si √∂sszes√≠t≈ë:**', 'üì¶ **Leadott rendel√©s:**')}"
            
            keyboard = [
                [InlineKeyboardButton("üõí √öj rendel√©s", callback_data="rendeles")],
                [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
            ]
            await safe_edit_message(query, success_msg, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
            
            # Lefoglalt k√©szlet t√∂rl√©se (mert m√°r le van vonva a v√©gleges k√©szletb≈ël)
            session["reserved_stock"] = {}
            
            # Session t√∂rl√©se
            session["order_state"] = {}

        elif data == "feltoltes" and actual_user_id == ADMIN_ID:
            keyboard = []
            keyboard.append([InlineKeyboardButton("üîπ VapSolo Triple 60K", callback_data="feltoltes_VapSolo")])
            keyboard.append([InlineKeyboardButton("üîπ Elf Bar MoonNight 40K", callback_data="feltoltes_Elf Bar")])
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Vissza", callback_data="back_to_main")])
            await query.edit_message_text("üì• **K√©szlet felt√∂lt√©s**\n\nV√°lassz term√©ket:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data.startswith("feltoltes_") and actual_user_id == ADMIN_ID:
            termek = data.split("_", 1)[1]
            session["state"] = {"mode": "stock_add", "termek": termek}
            display_name = "VapSolo Triple 60K" if termek == "VapSolo" else "Elf Bar MoonNight 40K"
            
            keyboard = [[InlineKeyboardButton("‚ùå M√©gsem", callback_data="feltoltes")]]
            await query.edit_message_text(f"üì• **{display_name} felt√∂lt√©s**\n\n√çrd be az √≠z nev√©t:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

        elif data == "back_to_main":
            await show_main_menu(query, actual_user_id)

    except Exception as e:
        try:
            data_str = data if 'data' in locals() else "UNKNOWN"
            print(f"Hiba a gomb kezel√©sben - Data: {data_str}, Error: {e}")
            
            # Ha van query √©s user_id, t√©rj√ºnk vissza a f≈ëmen√ºre
            if 'query' in locals() and 'actual_user_id' in locals():
                await show_main_menu(query, actual_user_id)
        except Exception as ex:
            print(f"Exception handling hiba: {ex}")
            pass

async def handle_text_message(update, context):
    """Sz√∂veges √ºzenetek kezel√©se"""
    global akciok, vip, keszlet, termek_leirasok
    
    if not update.effective_user or not update.message:
        return
        
    user_id = update.effective_user.id
    message_text = update.message.text
    session = get_user_session(user_id)
    
    # Csak admin √©s √°rus√≠t√≥k sz√∂veges √ºzenetei
    if user_id not in ARUSITO_IDK and user_id != ADMIN_ID:
        return
    
    if "state" not in session or not session["state"]:
        return
    
    state = session["state"]
    
    try:
        # Term√©k le√≠r√°s szerkeszt√©se
        if state.get("mode") == "termek_edit":
            termek = state.get("termek")
            if termek and user_id == ADMIN_ID:
                termek_leirasok[termek] = message_text
                
                display_name = "VapSolo Triple 60K" if termek == "VapSolo" else "Elf Bar MoonNight 40K"
                
                # Felhaszn√°l√≥ √ºzenet√©nek t√∂rl√©se
                try:
                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
                except Exception:
                    pass
                
                # Men√º friss√≠t√©se a session-ben t√°rolt √ºzenettel
                if "last_menu_message_id" in session and session["last_menu_message_id"]:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=update.effective_chat.id,
                            message_id=session["last_menu_message_id"],
                            text=f"‚úÖ **{display_name}** le√≠r√°s friss√≠tve!\n\nV√°lassz a men√ºb≈ël:",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üìã Term√©kek", callback_data="termekek")],
                                [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
                            ])
                        )
                    except Exception:
                        # Ha nem siker√ºl a szerkeszt√©s, √∫j √ºzenet k√ºld√©se
                        new_message = await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=f"‚úÖ **{display_name}** le√≠r√°s friss√≠tve!\n\nV√°lassz a men√ºb≈ël:",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üìã Term√©kek", callback_data="termekek")],
                                [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
                            ])
                        )
                        session["last_menu_message_id"] = new_message.message_id
                session["state"] = {}
        
        # Akci√≥ szerkeszt√©se
        elif state.get("mode") == "akcio_edit" and user_id == ADMIN_ID:
            akciok = message_text
            
            # Felhaszn√°l√≥ √ºzenet√©nek t√∂rl√©se
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception:
                pass
            
            # Men√º friss√≠t√©se
            if "last_menu_message_id" in session and session["last_menu_message_id"]:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=session["last_menu_message_id"],
                        text="‚úÖ **Akci√≥ friss√≠tve!**\n\nV√°lassz a men√ºb≈ël:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üéØ Akci√≥", callback_data="akcio")],
                            [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
                        ])
                    )
                except Exception:
                    new_message = await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="‚úÖ **Akci√≥ friss√≠tve!**\n\nV√°lassz a men√ºb≈ël:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üéØ Akci√≥", callback_data="akcio")],
                            [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
                        ])
                    )
                    session["last_menu_message_id"] = new_message.message_id
            session["state"] = {}
        
        # VIP szerkeszt√©se
        elif state.get("mode") == "vip_edit" and user_id == ADMIN_ID:
            vip = message_text
            
            # Felhaszn√°l√≥ √ºzenet√©nek t√∂rl√©se
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
            except Exception:
                pass
            
            # Men√º friss√≠t√©se
            if "last_menu_message_id" in session and session["last_menu_message_id"]:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=session["last_menu_message_id"],
                        text="‚úÖ **V.I.P. aj√°nlat friss√≠tve!**\n\nV√°lassz a men√ºb≈ël:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚≠ê V.I.P.", callback_data="vip")],
                            [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
                        ])
                    )
                except Exception:
                    new_message = await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="‚úÖ **V.I.P. aj√°nlat friss√≠tve!**\n\nV√°lassz a men√ºb≈ël:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚≠ê V.I.P.", callback_data="vip")],
                            [InlineKeyboardButton("üè† F≈ëmen√º", callback_data="back_to_main")]
                        ])
                    )
                    session["last_menu_message_id"] = new_message.message_id
            session["state"] = {}
        
        # K√©szlet felt√∂lt√©s - √≠z neve
        elif state.get("mode") == "stock_add" and user_id == ADMIN_ID:
            termek = state.get("termek")
            if termek:
                session["state"]["iz"] = message_text
                session["state"]["mode"] = "stock_add_quantity"
                
                keyboard = [[InlineKeyboardButton("‚ùå M√©gsem", callback_data="feltoltes")]]
                await update.message.reply_text(
                    f"üì¶ **{message_text}** - Mennyis√©g megad√°sa\n\n√çrd be a darabsz√°mot:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
        
        # K√©szlet felt√∂lt√©s - mennyis√©g
        elif state.get("mode") == "stock_add_quantity" and user_id == ADMIN_ID:
            try:
                quantity = int(message_text)
                if quantity <= 0:
                    await update.message.reply_text("‚ùå A mennyis√©g csak pozit√≠v sz√°m lehet!")
                    return
                
                termek = state.get("termek")
                iz = state.get("iz")
                
                if termek and iz:
                    if iz in keszlet[termek]:
                        keszlet[termek][iz] += quantity
                    else:
                        keszlet[termek][iz] = quantity
                    
                    display_name = "VapSolo Triple 60K" if termek == "VapSolo" else "Elf Bar MoonNight 40K"
                    
                    keyboard = [[InlineKeyboardButton("‚úÖ Rendben", callback_data="feltoltes")]]
                    await update.message.reply_text(
                        f"‚úÖ **K√©szlet friss√≠tve!**\n\n{display_name}\n{iz}: {keszlet[termek][iz]} db",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                    session["state"] = {}
                    
            except ValueError:
                await update.message.reply_text("‚ùå K√©rlek, csak sz√°mot √≠rj be!")
    
    except Exception as e:
        print(f"Hiba a sz√∂veges √ºzenet kezel√©sben: {e}")
        session["state"] = {}

# Main function
if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    print("Bot elindult...")
    application.run_polling()